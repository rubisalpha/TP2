
ex22 partie 1
def positifs(L):
    compteur = 0
    for nombre in L:
        if nombre >= 0:
            compteur += 1
            
    return compteur

L=[2,-1,3,4,-6,0,6]
print(positifs(L))

partie 2

def rangs_negatifs(L):
    return [index for index, value in enumerate(L) if value < 0]

# Exemple d'utilisation
resultat = rangs_negatifs([2, -1, 3, 4, -6, 0, 6])
print(resultat)  # Affiche [1, 4]

partie 3

def motif(L):
    return [0, 0] in (L[i:i+2] for i in range(len(L) - 1))

# Exemple d'utilisation
resultat = motif([1, 2, 0, 0, 4])
print(resultat)  # Affiche True

resultat2 = motif([1, 2, 3, 4])
print(resultat2)  # Affiche False

partie 4

def dix_vingt(L):
    return all(10 <= x <= 20 for x in L)

# Exemple d'utilisation
resultat1 = dix_vingt([10, 15, 20])
print(resultat1)  # Affiche True

resultat2 = dix_vingt([9, 15, 20])
print(resultat2)  # Affiche False

resultat3 = dix_vingt([10, 21])
print(resultat3)  # Affiche False



ex 23

partie 1

def croissante(L):
    n = len(L)
    for k in range(n - 1):  # On s'arrête à n - 1 pour éviter l'index out of range
        if L[k] > L[k + 1]:
            return False
    return True  # Si aucune condition n'a échoué, on renvoie True

# Exemple d'utilisation
resultat1 = croissante([1, 2, 2, 3])
print(resultat1)  # Affiche True

resultat2 = croissante([1, 3, 2])
print(resultat2)  # Affiche False

partie 2

def monotone(L):
    if len(L) < 2:  # Une liste avec moins de 2 éléments est considérée comme monotone
        return True
    
    croissante = True
    decroissante = True
    
    for i in range(len(L) - 1):
        if L[i] < L[i + 1]:
            decroissante = False
        elif L[i] > L[i + 1]:
            croissante = False
    
    return croissante or decroissante

# Exemple d'utilisation
resultat1 = monotone([1, 2, 3, 4])
print(resultat1)  # Affiche True (croissante)

resultat2 = monotone([4, 3, 2, 1])
print(resultat2)  # Affiche True (décroissante)

resultat3 = monotone([1, 2, 3, 2])
print(resultat3)  # Affiche False

resultat4 = monotone([2])
print(resultat4)  # Affiche True (moins de 2 éléments)


ex 25

def suite(n):
    if n < 1:
        return []  # Si n est 0, on renvoie une liste vide
    u = [1]  # Initialisation avec u0 = 1
    for i in range(1, n):
        next_value = u[i - 1] ** 2 + (i - 1)  # Calcul de un+1
        u.append(next_value)
    return u

# Exemple d'utilisation
resultat = suite(5)
print(resultat)  # Affiche les 5 premières valeurs de la suite


ex 26

def valeur_absolue_liste(L):
    for i in range(len(L)):
        L[i] = abs(L[i])

# Exemple d'utilisation
ma_liste = [-1, 2, -3, 4, -5]
valeur_absolue_liste(ma_liste)
print(ma_liste)  # Affiche [1, 2, 3, 4, 5]


ex 27

def E_et_sigma(valeurs, probabilites):
    if len(valeurs) != len(probabilites):
        raise ValueError("Les listes de valeurs et de probabilités doivent avoir la même longueur.")
    if not all(0 <= p <= 1 for p in probabilites) or sum(probabilites) != 1:
        raise ValueError("Les probabilités doivent être comprises entre 0 et 1 et leur somme doit être égale à 1.")

    # Calcul de l'espérance
    esperance = sum(v * p for v, p in zip(valeurs, probabilites))

    # Calcul de la variance
    variance = sum(p * (v - esperance) ** 2 for v, p in zip(valeurs, probabilites))

    # Calcul de l'écart-type
    ecart_type = variance ** 0.5

    return esperance, ecart_type

# Exemple d'utilisation
valeurs = [1, 2, 3]
probabilites = [0.2, 0.5, 0.3]
esperance, ecart_type = E_et_sigma(valeurs, probabilites)
print(f"Espérance: {esperance}, Écart-type: {ecart_type}")








